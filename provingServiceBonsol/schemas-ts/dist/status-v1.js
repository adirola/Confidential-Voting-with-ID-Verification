"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StatusV1 = void 0;
const flatbuffers = __importStar(require("flatbuffers"));
const status_types_js_1 = require("./status-types.js");
class StatusV1 {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsStatusV1(bb, obj) {
        return (obj || new StatusV1()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsStatusV1(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new StatusV1()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    executionId(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    status() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : status_types_js_1.StatusTypes.Unknown;
    }
    mutate_status(value) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        if (offset === 0) {
            return false;
        }
        this.bb.writeUint8(this.bb_pos + offset, value);
        return true;
    }
    proof(index) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    }
    proofLength() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    proofArray() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    inputs(index) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    }
    inputsLength() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    inputsArray() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    inputDigest(index) {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    }
    inputDigestLength() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    inputDigestArray() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    static startStatusV1(builder) {
        builder.startObject(5);
    }
    static addExecutionId(builder, executionIdOffset) {
        builder.addFieldOffset(0, executionIdOffset, 0);
    }
    static addStatus(builder, status) {
        builder.addFieldInt8(1, status, status_types_js_1.StatusTypes.Unknown);
    }
    static addProof(builder, proofOffset) {
        builder.addFieldOffset(2, proofOffset, 0);
    }
    static createProofVector(builder, data) {
        builder.startVector(1, data.length, 1);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    }
    static startProofVector(builder, numElems) {
        builder.startVector(1, numElems, 1);
    }
    static addInputs(builder, inputsOffset) {
        builder.addFieldOffset(3, inputsOffset, 0);
    }
    static createInputsVector(builder, data) {
        builder.startVector(1, data.length, 1);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    }
    static startInputsVector(builder, numElems) {
        builder.startVector(1, numElems, 1);
    }
    static addInputDigest(builder, inputDigestOffset) {
        builder.addFieldOffset(4, inputDigestOffset, 0);
    }
    static createInputDigestVector(builder, data) {
        builder.startVector(1, data.length, 1);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    }
    static startInputDigestVector(builder, numElems) {
        builder.startVector(1, numElems, 1);
    }
    static endStatusV1(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static finishStatusV1Buffer(builder, offset) {
        builder.finish(offset);
    }
    static finishSizePrefixedStatusV1Buffer(builder, offset) {
        builder.finish(offset, undefined, true);
    }
    static createStatusV1(builder, executionIdOffset, status, proofOffset, inputsOffset, inputDigestOffset) {
        StatusV1.startStatusV1(builder);
        StatusV1.addExecutionId(builder, executionIdOffset);
        StatusV1.addStatus(builder, status);
        StatusV1.addProof(builder, proofOffset);
        StatusV1.addInputs(builder, inputsOffset);
        StatusV1.addInputDigest(builder, inputDigestOffset);
        return StatusV1.endStatusV1(builder);
    }
}
exports.StatusV1 = StatusV1;
