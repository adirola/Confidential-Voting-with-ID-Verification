// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class ClaimV1 {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ClaimV1 {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsClaimV1(bb:flatbuffers.ByteBuffer, obj?:ClaimV1):ClaimV1 {
  return (obj || new ClaimV1()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsClaimV1(bb:flatbuffers.ByteBuffer, obj?:ClaimV1):ClaimV1 {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ClaimV1()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

executionId():string|null
executionId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
executionId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

blockCommitment():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

mutate_block_commitment(value:bigint):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeUint64(this.bb_pos + offset, value);
  return true;
}

static startClaimV1(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addExecutionId(builder:flatbuffers.Builder, executionIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, executionIdOffset, 0);
}

static addBlockCommitment(builder:flatbuffers.Builder, blockCommitment:bigint) {
  builder.addFieldInt64(1, blockCommitment, BigInt('0'));
}

static endClaimV1(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishClaimV1Buffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedClaimV1Buffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

static createClaimV1(builder:flatbuffers.Builder, executionIdOffset:flatbuffers.Offset, blockCommitment:bigint):flatbuffers.Offset {
  ClaimV1.startClaimV1(builder);
  ClaimV1.addExecutionId(builder, executionIdOffset);
  ClaimV1.addBlockCommitment(builder, blockCommitment);
  return ClaimV1.endClaimV1(builder);
}
}
