// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Input } from './input.js';


export class ExecutionRequestV1 {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ExecutionRequestV1 {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsExecutionRequestV1(bb:flatbuffers.ByteBuffer, obj?:ExecutionRequestV1):ExecutionRequestV1 {
  return (obj || new ExecutionRequestV1()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsExecutionRequestV1(bb:flatbuffers.ByteBuffer, obj?:ExecutionRequestV1):ExecutionRequestV1 {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ExecutionRequestV1()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

tip():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

mutate_tip(value:bigint):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeUint64(this.bb_pos + offset, value);
  return true;
}

executionId():string|null
executionId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
executionId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

imageId():string|null
imageId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
imageId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

callbackProgramId(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

callbackProgramIdLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

callbackProgramIdArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

callbackInstructionPrefix(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

callbackInstructionPrefixLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

callbackInstructionPrefixArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

forwardOutput():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

mutate_forward_output(value:boolean):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 14);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
}

verifyInputHash():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : true;
}

mutate_verify_input_hash(value:boolean):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 16);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
}

input(index: number, obj?:Input):Input|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? (obj || new Input()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

inputLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

inputDigest(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

inputDigestLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

inputDigestArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

maxBlockHeight():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

mutate_max_block_height(value:bigint):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 22);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeUint64(this.bb_pos + offset, value);
  return true;
}

static startExecutionRequestV1(builder:flatbuffers.Builder) {
  builder.startObject(10);
}

static addTip(builder:flatbuffers.Builder, tip:bigint) {
  builder.addFieldInt64(0, tip, BigInt('0'));
}

static addExecutionId(builder:flatbuffers.Builder, executionIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, executionIdOffset, 0);
}

static addImageId(builder:flatbuffers.Builder, imageIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, imageIdOffset, 0);
}

static addCallbackProgramId(builder:flatbuffers.Builder, callbackProgramIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, callbackProgramIdOffset, 0);
}

static createCallbackProgramIdVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startCallbackProgramIdVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addCallbackInstructionPrefix(builder:flatbuffers.Builder, callbackInstructionPrefixOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, callbackInstructionPrefixOffset, 0);
}

static createCallbackInstructionPrefixVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startCallbackInstructionPrefixVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addForwardOutput(builder:flatbuffers.Builder, forwardOutput:boolean) {
  builder.addFieldInt8(5, +forwardOutput, +false);
}

static addVerifyInputHash(builder:flatbuffers.Builder, verifyInputHash:boolean) {
  builder.addFieldInt8(6, +verifyInputHash, +true);
}

static addInput(builder:flatbuffers.Builder, inputOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, inputOffset, 0);
}

static createInputVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startInputVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addInputDigest(builder:flatbuffers.Builder, inputDigestOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, inputDigestOffset, 0);
}

static createInputDigestVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startInputDigestVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addMaxBlockHeight(builder:flatbuffers.Builder, maxBlockHeight:bigint) {
  builder.addFieldInt64(9, maxBlockHeight, BigInt('0'));
}

static endExecutionRequestV1(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishExecutionRequestV1Buffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedExecutionRequestV1Buffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

static createExecutionRequestV1(builder:flatbuffers.Builder, tip:bigint, executionIdOffset:flatbuffers.Offset, imageIdOffset:flatbuffers.Offset, callbackProgramIdOffset:flatbuffers.Offset, callbackInstructionPrefixOffset:flatbuffers.Offset, forwardOutput:boolean, verifyInputHash:boolean, inputOffset:flatbuffers.Offset, inputDigestOffset:flatbuffers.Offset, maxBlockHeight:bigint):flatbuffers.Offset {
  ExecutionRequestV1.startExecutionRequestV1(builder);
  ExecutionRequestV1.addTip(builder, tip);
  ExecutionRequestV1.addExecutionId(builder, executionIdOffset);
  ExecutionRequestV1.addImageId(builder, imageIdOffset);
  ExecutionRequestV1.addCallbackProgramId(builder, callbackProgramIdOffset);
  ExecutionRequestV1.addCallbackInstructionPrefix(builder, callbackInstructionPrefixOffset);
  ExecutionRequestV1.addForwardOutput(builder, forwardOutput);
  ExecutionRequestV1.addVerifyInputHash(builder, verifyInputHash);
  ExecutionRequestV1.addInput(builder, inputOffset);
  ExecutionRequestV1.addInputDigest(builder, inputDigestOffset);
  ExecutionRequestV1.addMaxBlockHeight(builder, maxBlockHeight);
  return ExecutionRequestV1.endExecutionRequestV1(builder);
}
}
